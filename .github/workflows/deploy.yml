# .github/workflows/deploy.yml

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging

jobs:
  fetch-env-vars:
    runs-on: ubuntu-latest
    outputs:
      env_vars: ${{ steps.set-env-vars.outputs.env_vars }}
    steps:
      - name: Set environment variables for staging or production
        id: set-env-vars
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "env_vars=$(jq -n \
              --arg DB_HOST "${{ secrets.PRODUCTION_DB_HOST }}" \
              --arg DB_USER "${{ secrets.PRODUCTION_DB_USER }}" \
              --arg DB_PASSWORD "${{ secrets.PRODUCTION_DB_PASSWORD }}" \
              --arg APP_KEY "${{ secrets.PRODUCTION_APP_KEY }}" \
              '{DB_HOST: $DB_HOST, DB_USER: $DB_USER, DB_PASSWORD: $DB_PASSWORD, APP_KEY: $APP_KEY}')" >> $GITHUB_OUTPUT
          else
            echo "env_vars=$(jq -n \
              --arg DB_HOST "${{ secrets.STAGING_DB_HOST }}" \
              --arg DB_USER "${{ secrets.STAGING_DB_USER }}" \
              --arg DB_PASSWORD "${{ secrets.STAGING_DB_PASSWORD }}" \
              --arg APP_KEY "${{ secrets.STAGING_APP_KEY }}" \
              '{DB_HOST: $DB_HOST, DB_USER: $DB_USER, DB_PASSWORD: $DB_PASSWORD, APP_KEY: $APP_KEY}')" >> $GITHUB_OUTPUT
          fi

  build:
    runs-on: ubuntu-latest
    needs: fetch-env-vars
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: mbstring, pdo, xml, bcmath, json
          ini-values: post_max_size=256M, upload_max_filesize=256M
          coverage: none

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --no-interaction

      - name: Package the application
        run: tar -czf my-app.tar.gz .

      - name: Save artifact
        uses: actions/upload-artifact@v2
        with:
          name: my-app
          path: my-app.tar.gz

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: my-app
          path: .

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}

      - name: Deploy to Staging
        run: |
          scp -o StrictHostKeyChecking=no my-app.tar.gz user@staging-server:/path/to/deploy
          ssh -o StrictHostKeyChecking=no user@staging-server 'tar -xzf /path/to/deploy/my-app.tar.gz -C /path/to/deploy && cd /path/to/deploy && composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev && php artisan migrate --force && php artisan cache:clear && php artisan config:cache && php artisan route:cache && php artisan view:cache'

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: my-app
          path: .

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}

      - name: Deploy to Production
        run: |
          scp -o StrictHostKeyChecking=no my-app.tar.gz user@production-server:/path/to/deploy
          ssh -o StrictHostKeyChecking=no user@production-server 'tar -xzf /path/to/deploy/my-app.tar.gz -C /path/to/deploy && cd /path/to/deploy && composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev && php artisan migrate --force && php artisan cache:clear && php artisan config:cache && php artisan route:cache && php artisan view:cache'
